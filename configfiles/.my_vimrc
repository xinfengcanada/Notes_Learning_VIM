
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Enable filetype plugins
filetype plugin on
filetype indent on

let $LANG='en'
set langmenu=en

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
"set showcmd

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
"set nomodeline

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" No annoying sound on errors
set noerrorbells
set novisualbell
set vb t_vb=
set tm=500


" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm


" Enable use of the mouse for all modes
if has('mouse')
  set mouse=a
endif

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
" More Info: more https://stackoverflow.com/questions/12422468/vim-netrw-asking-to-press-enter-or-type-command-to-continue/12423858#12423858
set cmdheight=2

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Rebind <Leader> key
let mapleader = ","

" Map escape to caps while working with Vim
vnoremap <Leader>e <ESC>
nnoremap <Leader>e <ESC>
inoremap <Leader>e <ESC>

vnoremap <Leader>E <ESC>
nnoremap <Leader>E <ESC>
inoremap <Leader>E <ESC>

"------------------------------------------------------------
" .vimrc Setting

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Quick reload and edit .vimrc
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"------------------------------------------------------------
" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

" Color scheme
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
set t_Co=256
color wombat256mod

" Display line numbers on the left
set number

" Display line relativnumbers
set relativenumber

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" width of document (used by gd)
"set tw=79

" Don't automatically wrap on load
"set nowrap

" Don't automatically wrap text when typing
"set fo-=t

" Highlight the screen column
set colorcolumn=80

"highlight ColorColumn ctermbg=233

" Always display the status line, even if only one window is displayed
 set laststatus=2

"------------------------------------------------------------
" Searching

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Incremental search
set incsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

"------------------------------------------------------------
" Indentation options
" Indentation settings according to personal preference.
" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.

" Use spaces instead of tabs"
set expandtab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" 1 del == 4 spaces
set softtabstop=4
set smarttab

set shiftround

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
set smartindent



"------------------------------------------------------------
" Editing

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Set to auto read when a file is changed from the outside
set autoread
autocmd FocusGained * checktime

"  Sets how many lines of history VIM has to remember
set history=1000
set undolevels=700
set cursorline cul

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Quick delete all space character at the end of lines of current file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Add new line on Enter in normal mode
" map <Enter> o<ESC>

" Quick save command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" map sort function to a key
"vnoremap <Leader>s :sort<CR>

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Commenting blocks of code.
" More Info: https://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim

augroup commenting_blocks_of_code
  autocmd!
  autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
  autocmd FileType sh,ruby,python   let b:comment_leader = '# '
  autocmd FileType conf,fstab       let b:comment_leader = '# '
  autocmd FileType tex              let b:comment_leader = '% '
  autocmd FileType mail             let b:comment_leader = '> '
  autocmd FileType vim              let b:comment_leader = '" '
augroup END
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" easier formatting of paragraphs
"vmap Q gq
"nmap Q gqap

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:
"set confirm
"set autowriteall

" Auto save
"set autowrite

" Use <F2> to toggle between 'paste' and 'nopaste'
" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.
"set pastetoggle=<F2>
"set clipboard=unnamed

"map <leader>pp :setlocal paste!<cr>


"------------------------------------------------------------
" Managing and Moving between Windows

" Quick quit command
" Quit current window
"noremap <Leader>e :quit<CR>
" Quit all windows
"noremap <Leader>E :qa!<CR>

" Smart way to move between windows
" Bind Ctrl-<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-l> <C-W>l
"map <C-h> <C-W>h
set winwidth=90
set wmw=20

"------------------------------------------------------------
" Managing and Moving between tabs

" Move easierly between tabs
"map <leader>n <esc>:tabprevious<CR>
"map <leader>m <esc>:tabnext<CR>
"map <leader>n <C-PageDown>
"map <leader>p <C-PageUp>

" Useful mappings for managing tabs
noremap <leader>to :tabnew<cr>
noremap <leader>tn :tabn<cr>
noremap <leader>tp :tabp<cr>
noremap <leader>tm :tabmove<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Compile and Run
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"------------------------------------------------------------
" Compile and run .py, .c, .cpp without mutual disruption

" https://stackoverflow.com/questions/18296192/vim-compile-and-run-shortcut
autocmd filetype python map <F9> :w <bar> exec '!clear; python3 '.shellescape('%')<CR>
autocmd filetype c map <F9> :w <bar> exec '!clear; gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cpp map <F9> :w <bar> exec '!clear; g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"------------------------------------------------------------
" Setup Pathogen to manage your plugins

" mkdir -p ~/.vim/autoload ~/.vim/bundle
" curl -LSso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim
" Now you can install any plugin into a .vim/bundle/plugin-name/ folder
" See More: https://github.com/tpope/vim-pathogen
execute pathogen#infect()

"------------------------------------------------------------
" Python

" Introduction: Powerline is a utility plugin which allows you to create better-looking, more functional vim statuslines.
" Settings for vim-powerline
" cd ~/.vim/bundle
" git clone https://github.com/Lokaltog/vim-powerline.git
let g:Powerline_symbols = 'compatible'
let g:Powerline_stl_path_style = 'full'
let g:Powerline_colorscheme = 'solarized256'
set laststatus=2

" Introduction: Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
" Settings for ctrlp
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*
set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
set wildignore+=*\\tmp\\*,*swp,*.zip,*.exe " Windows

"
let g:ctrlp_working_path_mode = 'ca'

" Use a custom file listing command
" let g:ctrlp_user_command = 'find %s -type f' "MacOSX/Linux
" let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d' "Windows

" Introduction: jedi-vim is a VIM binding to the autocompletion library Jedi.
" Settings for jedi-vim
" cd ~/.vim/bundle
" git clone --recursive https://github.com/davidhalter/jedi-vim.git

let g:jedi#usages_command= "<leader>z"
let g:jedi#popup_on_dot = 1
let g:jedi#popup_select_first = 0
let g:jedi#show_call_signatures = "1"
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

" Better navigating through omnicomplete option list
" More Info: http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone

function! OmniPopup(action) " add a ! after function to overwrite the previous function with the same name
    if pumvisible()
        if a:action == 'j'
            return "\<C-n>"
        elseif a:action == 'k'
            return "\<C-p>"
        endif
    endif
    return a:action
endfunction

inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>
